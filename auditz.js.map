{"version":3,"sources":["auditz.js"],"names":["debug","warn","options","rest","silenceWarnings","Model","bootOptions","modelName","app","createdAt","updatedAt","deletedAt","createdBy","updatedBy","deletedBy","softDelete","unknownUser","remoteCtx","scrub","required","validateUpsert","revisions","name","idType","dataSource","autoUpdate","revisionsModelName","properties","definition","idName","scrubbed","propertiesToScrub","Array","isArray","filter","prop","reduce","obj","settings","pluralModelName","defineProperty","type","Date","defaultFn","Number","observe","ctx","next","currentUser","req","accessToken","userId","getApp","err","a","ipForwarded","ip","headers","connection","remoteAddress","isNewInstance","models","create","action","table_name","row_id","instance","id","old","new","user","ip_forwarded","delete","oldInstance","oldInstances","entries","map","inst","updatedIds","newInst","query","where","inq","find","error","newInstances","forEach","data","getOldInstance","cb","args","findById","deleted","length","result","console","skipUpdatedAt","keyAt","keyBy","destroyAll","softDestroyAll","callback","updateAll","then","catch","reject","remove","deleteAll","destroyById","softDestroyById","opt","undefined","newOpt","removeById","deleteById","prototype","destroy","softDestroy","updateAttributes","queryNonDeleted","_findOrCreate","findOrCreate","findOrCreateDeleted","and","call","_find","findDeleted","_count","count","countDeleted","whereNotDeleted","_update","update","updateDeleted","_setupRevisionsModel","opts","dsName","rowIdType","revisionsDef","require","s","revisionsModel","dataSources","createModel","model","autoupdate"],"mappings":"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","file":"auditz.js","sourcesContent":["import _debug from './debug';\n\nconst debug = _debug();\nconst warn = (options, ...rest) => {\n  if (!options.silenceWarnings) {\n    console.warn(...rest);\n  }\n};\n\n\nexport default (Model, bootOptions = {}) => {\n  debug('Auditz mixin for Model %s', Model.modelName);\n  let app;\n\n  const options = Object.assign({\n    createdAt: 'createdAt',\n    updatedAt: 'updatedAt',\n    deletedAt: 'deletedAt',\n    createdBy: 'createdBy',\n    updatedBy: 'updatedBy',\n    deletedBy: 'deletedBy',\n    softDelete: true,\n    unknownUser: 0,\n    remoteCtx: 'remoteCtx',\n    scrub: false,\n    required: true,\n    validateUpsert: false, // default to turning validation off\n    silenceWarnings: false,\n    revisions: {\n      name: 'revisions',\n      idType: 'Number',\n      dataSource: 'db',\n      autoUpdate: true,\n    },\n  }, bootOptions);\n\n  options.revisionsModelName = (typeof options.revisions === 'object' && options.revisions.name) ?\n    options.revisions.name : 'revisions';\n  debug('options', options);\n\n  const properties = Model.definition.properties;\n  const idName = Model.dataSource.idName(Model.modelName);\n\n  let scrubbed = {};\n  if (options.softDelete) {\n    if (options.scrub !== false) {\n      let propertiesToScrub = options.scrub;\n      if (!Array.isArray(propertiesToScrub)) {\n        propertiesToScrub = Object.keys(properties)\n          .filter(prop => !properties[prop][idName] && prop !== options.deletedAt && prop !== options.deletedBy);\n      }\n      scrubbed = propertiesToScrub.reduce((obj, prop) => ({ ...obj, [prop]: null }), {});\n    }\n  }\n\n  if (!options.validateUpsert && Model.settings.validateUpsert) {\n    Model.settings.validateUpsert = false;\n    warn(options, `${Model.pluralModelName} settings.validateUpsert was overridden to false`);\n  }\n\n  if (Model.settings.validateUpsert && options.required) {\n    warn(options, `Upserts for ${Model.pluralModelName} will fail when\n          validation is turned on and time stamps are required`);\n  }\n\n  Model.settings.validateUpsert = options.validateUpsert;\n\n  if (options.createdAt !== false) {\n    if (typeof(properties[options.createdAt]) === 'undefined') {\n      Model.defineProperty(options.createdAt, {type: Date, required: options.required, defaultFn: 'now'});\n    }\n  }\n\n  if (options.updatedAt !== false) {\n    if (typeof(properties[options.updatedAt]) === 'undefined') {\n      Model.defineProperty(options.updatedAt, {type: Date, required: options.required});\n    }\n  }\n\n  if (options.createdBy !== false) {\n    if (typeof(properties[options.createdBy]) === 'undefined') {\n      Model.defineProperty(options.createdBy, {type: Number, required: false});\n    }\n  }\n\n  if (options.updatedBy !== false) {\n    if (typeof(properties[options.updatedBy]) === 'undefined') {\n      Model.defineProperty(options.updatedBy, {type: Number, required: false});\n    }\n  }\n\n  if (options.softDelete) {\n    if (typeof(properties[options.deletedAt]) === 'undefined') {\n      Model.defineProperty(options.deletedAt, {type: Date, required: false});\n    }\n    if (options.deletedBy !== false && typeof(properties[options.deletedBy]) === 'undefined') {\n      Model.defineProperty(options.deletedBy, {type: Number, required: false});\n    }\n  }\n\n  Model.observe('after save', (ctx, next) => {\n    if (!options.revisions) {\n      return next();\n    }\n    debug('ctx.options', ctx.options);\n\n    // determine the currently logged in user. Default to options.unknownUser\n    let currentUser = options.unknownUser;\n\n    if (ctx.options[options.remoteCtx]) {\n      if (ctx.options[options.remoteCtx].req.accessToken) {\n        currentUser = ctx.options[options.remoteCtx].req.accessToken.userId;\n      }\n    }\n\n    Model.getApp((err, a) => {\n      if (err) { return next(err); }\n      app = a;\n      let ipForwarded = '';\n      let ip = '127.0.0.1';\n      if (ctx.options.remoteCtx) {\n        ipForwarded = ctx.options.remoteCtx.req.headers['x-forwarded-for'];\n        ip = ctx.options.remoteCtx.req.connection.remoteAddress;\n      }\n      // If it's a new instance, set the createdBy to currentUser\n      if (ctx.isNewInstance) {\n        app.models[options.revisionsModelName].create({\n          action: 'create',\n          table_name: Model.modelName,\n          row_id: ctx.instance.id,\n          old: null,\n          new: ctx.instance,\n          user: currentUser,\n          ip: ip,\n          ip_forwarded: ipForwarded,\n        }, next);\n      } else {\n        if (ctx.options && ctx.options.delete) {\n          if (ctx.options.oldInstance) {\n            app.models[options.revisionsModelName].create({\n              action: 'delete',\n              table_name: Model.modelName,\n              row_id: ctx.options.oldInstance.id,\n              old: ctx.options.oldInstance,\n              new: null,\n              user: currentUser,\n              ip: ip,\n              ip_forwarded: ipForwarded,\n            }, next);\n          } else if (ctx.options.oldInstances) {\n            const entries = ctx.options.oldInstances.map(inst => {\n              return {\n                action: 'delete',\n                table_name: Model.modelName,\n                row_id: inst.id,\n                old: inst,\n                new: null,\n                user: currentUser,\n                ip: ip,\n                ip_forwarded: ipForwarded,\n              };\n            });\n            app.models[options.revisionsModelName].create(entries, next);\n          } else {\n            debug('Cannot register delete without old instance! Options: %j', ctx.options);\n            return next();\n          }\n        } else {\n          if (ctx.options.oldInstance && ctx.instance) {\n            const inst = ctx.instance;\n            app.models[options.revisionsModelName].create({\n              action: 'update',\n              table_name: Model.modelName,\n              row_id: inst.id,\n              old: ctx.options.oldInstance,\n              new: inst,\n              user: currentUser,\n              ip: ip,\n              ip_forwarded: ipForwarded,\n            }, next);\n          } else if (ctx.options.oldInstances) {\n            const updatedIds = ctx.options.oldInstances.map(inst => { return inst.id; });\n            let newInst = {};\n            const query = {where: {[ idName ]: {inq: updatedIds}}};\n            app.models[Model.modelName].find(query, (error, newInstances) => {\n              if (error) { return next(error); }\n              newInstances.forEach(inst => {\n                newInst[ inst[ idName ] ] = inst;\n              });\n              const entries = ctx.options.oldInstances.map(inst => {\n                return {\n                  action: 'update',\n                  table_name: Model.modelName,\n                  row_id: inst.id,\n                  old: inst,\n                  new: newInst[inst.id],\n                  user: currentUser,\n                  ip: ip,\n                  ip_forwarded: ipForwarded,\n                };\n              });\n              app.models[options.revisionsModelName].create(entries, next);\n            });\n          } else {\n            debug('Cannot register update without old and new instance. Options: %j', ctx.options);\n            debug('instance: %j', ctx.instance);\n            debug('data: %j', ctx.data);\n            return next();\n          }\n        }\n      }\n    });\n  });\n\n  function getOldInstance(ctx, cb) {\n    if (options.revisions) {\n      if (typeof ctx.isNewInstance === 'undefined' || !ctx.isNewInstance) {\n        let id = ctx.instance ? ctx.instance.id : null;\n        if (!id) {\n          id = ctx.data ? ctx.data.id : null;\n        }\n        if (!id && ctx.where) {\n          id = ctx.where.id;\n        }\n        if (!id && ctx.options.remoteCtx) {\n          id = ctx.options.remoteCtx.req && ctx.options.remoteCtx.req.args ?\n            ctx.options.remoteCtx.req.args.id : null;\n        }\n        if (id) {\n          Model.findById(id, {deleted: true}, (err, oldInstance) => {\n            if (err) { cb(err); } else { cb(null, oldInstance); }\n          });\n        } else {\n          const query = {where: ctx.where} || {};\n          Model.find(query, (err, oldInstances) => {\n            if (err) {\n              cb(err);\n            } else {\n              if (oldInstances.length > 1) {\n                return cb(null, oldInstances);\n              } else if (oldInstances.length === 0) {\n                return cb();\n              }\n              cb(null, oldInstances[0]);\n            }\n          });\n        }\n      } else {\n        cb();\n      }\n    } else {\n      cb();\n    }\n  }\n\n  Model.observe('before save', (ctx, next) => {\n    const softDelete = ctx.options.delete;\n\n    getOldInstance(ctx, (err, result) => {\n      if (err) {\n        console.error(err);\n        return next(err);\n      }\n\n      if (Array.isArray(result)) {\n        ctx.options.oldInstances = result;\n      } else {\n        ctx.options.oldInstance = result;\n      }\n      // determine the currently logged in user. Default to options.unknownUser\n      let currentUser = options.unknownUser;\n\n      if (ctx.options[options.remoteCtx]) {\n        if (ctx.options[options.remoteCtx].req.accessToken) {\n          currentUser = ctx.options[options.remoteCtx].req.accessToken.userId;\n        }\n      }\n\n      // If it's a new instance, set the createdBy to currentUser\n      if (ctx.isNewInstance) {\n        debug('Setting %s.%s to %s', ctx.Model.modelName, options.createdBy, currentUser);\n        ctx.instance[options.createdBy] = currentUser;\n      } else {\n        // if the createdBy and createdAt are sent along in the data to save, remove the keys\n        // as we don't want to let the user overwrite it\n        if (ctx.instance) {\n          delete ctx.instance[options.createdBy];\n          delete ctx.instance[options.createdAt];\n        } else {\n          delete ctx.data[options.createdBy];\n          delete ctx.data[options.createdAt];\n        }\n      }\n\n      if (ctx.options && ctx.options.skipUpdatedAt) { return next(); }\n      let keyAt = options.updatedAt;\n      let keyBy = options.updatedBy;\n      if (options.softDelete) {\n        // Since soft deletes replace the actual delete by an update, we set the option\n        // 'delete' in the overridden delete functions that perform updates.\n        // We now have to determine if we need to set updatedAt/updatedBy or\n        // deletedAt/deletedBy\n        if (softDelete) {\n          keyAt = options.deletedAt;\n          keyBy = options.deletedBy;\n        }\n      }\n      if (ctx.instance) {\n        ctx.instance[keyAt] = new Date();\n        ctx.instance[keyBy] = currentUser;\n      } else {\n        ctx.data[keyAt] = new Date();\n        ctx.data[keyBy] = currentUser;\n      }\n      return next();\n    });\n  });\n\n  if (options.softDelete) {\n    Model.destroyAll = function softDestroyAll(where, cb) {\n      let query = where || {};\n      let callback = cb;\n      if (typeof where === 'function') {\n        callback = where;\n        query = {};\n      }\n      return Model.updateAll(query, { ...scrubbed }, {delete: true})\n        .then(result => (typeof callback === 'function') ? callback(null, result) : result)\n        .catch(error => (typeof callback === 'function') ? callback(error) : Promise.reject(error));\n    };\n\n    Model.remove = Model.destroyAll;\n    Model.deleteAll = Model.destroyAll;\n\n    Model.destroyById = function softDestroyById(id, opt, cb) {\n      const callback = (cb === undefined && typeof opt === 'function') ? opt : cb;\n      let newOpt = {delete: true};\n      if (typeof opt === 'object') {\n        newOpt.remoteCtx = opt.remoteCtx;\n      }\n\n      return Model.updateAll({ [idName]: id }, { ...scrubbed}, newOpt)\n        .then(result => (typeof callback === 'function') ? callback(null, result) : result)\n        .catch(error => (typeof callback === 'function') ? callback(error) : Promise.reject(error));\n    };\n\n    Model.removeById = Model.destroyById;\n    Model.deleteById = Model.destroyById;\n\n    Model.prototype.destroy = function softDestroy(opt, cb) {\n      const callback = (cb === undefined && typeof opt === 'function') ? opt : cb;\n\n      return this.updateAttributes({ ...scrubbed }, {delete: true})\n        .then(result => (typeof cb === 'function') ? callback(null, result) : result)\n        .catch(error => (typeof cb === 'function') ? callback(error) : Promise.reject(error));\n    };\n\n    Model.prototype.remove = Model.prototype.destroy;\n    Model.prototype.delete = Model.prototype.destroy;\n\n    // Emulate default scope but with more flexibility.\n    const queryNonDeleted = {[options.deletedAt]: null};\n\n    const _findOrCreate = Model.findOrCreate;\n    Model.findOrCreate = function findOrCreateDeleted(query = {}, ...rest) {\n      if (!query.deleted) {\n        if (!query.where || Object.keys(query.where).length === 0) {\n          query.where = queryNonDeleted;\n        } else {\n          query.where = { and: [ query.where, queryNonDeleted ] };\n        }\n      }\n\n      return _findOrCreate.call(Model, query, ...rest);\n    };\n\n    const _find = Model.find;\n    Model.find = function findDeleted(query = {}, ...rest) {\n      if (!query.deleted) {\n        if (!query.where || Object.keys(query.where).length === 0) {\n          query.where = queryNonDeleted;\n        } else {\n          query.where = { and: [ query.where, queryNonDeleted ] };\n        }\n      }\n\n      return _find.call(Model, query, ...rest);\n    };\n\n    const _count = Model.count;\n    Model.count = function countDeleted(where = {}, ...rest) {\n      // Because count only receives a 'where', there's nowhere to ask for the deleted entities.\n      let whereNotDeleted;\n      if (!where || Object.keys(where).length === 0) {\n        whereNotDeleted = queryNonDeleted;\n      } else {\n        whereNotDeleted = { and: [ where, queryNonDeleted ] };\n      }\n      return _count.call(Model, whereNotDeleted, ...rest);\n    };\n\n    const _update = Model.update;\n    Model.update = Model.updateAll = function updateDeleted(where = {}, ...rest) {\n      // Because update/updateAll only receives a 'where', there's nowhere to ask for the deleted entities.\n      let whereNotDeleted;\n      if (!where || Object.keys(where).length === 0) {\n        whereNotDeleted = queryNonDeleted;\n      } else {\n        whereNotDeleted = { and: [ where, queryNonDeleted ] };\n      }\n      return _update.call(Model, whereNotDeleted, ...rest);\n    };\n  }\n\n  function _setupRevisionsModel(opts) {\n    const autoUpdate = (opts.revisions === true || (typeof opts.revisions === 'object' && opts.revisions.autoUpdate));\n    const dsName = (typeof opts.revisions === 'object' && opts.revisions.dataSource) ?\n      opts.revisions.dataSource : 'db';\n    const rowIdType = (typeof opts.revisions === 'object' && opts.revisions.idType) ?\n      opts.revisions.idType : 'Number';\n\n    const revisionsDef = require('./models/revision.json');\n    let settings = {};\n    for (let s in revisionsDef) {\n      if (s !== 'name' && s !== 'properties') {\n        settings[s] = revisionsDef[s];\n      }\n    }\n\n    revisionsDef.properties.row_id.type = rowIdType;\n    const revisionsModel = app.dataSources[dsName].createModel(\n      options.revisionsModelName,\n      revisionsDef.properties,\n      settings\n    );\n    const revisions = require('./models/revision')(revisionsModel, opts);\n\n    app.model(revisions);\n\n\n    if (autoUpdate) {\n      // create or update the revisions table\n      app.dataSources[dsName].autoupdate([options.revisionsModelName], (error) => {\n        if (error) {console.error(error);}\n      });\n    }\n  }\n\n  if (options.revisions) {\n    Model.getApp((err, a) => {\n      if (err) { return console.error(err);}\n      app = a;\n      if (!app.models[options.revisionsModelName]) {\n        _setupRevisionsModel(options);\n      }\n    });\n  }\n};\n"],"sourceRoot":"/Users/louislinehan/ownCloud/Documents/Projects/Loopback/loopback-auditz/src"}